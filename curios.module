<?php
/*
 * curios.module
 * 
 * Copyright (c) 2011-2013, Stuart Taylor (staylor@abdn.ac.uk),
 * University of Aberdeen. All rights reserved.
 *
 * CURIOS: Linked Data CMS is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This software is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this software. If not, see <http://www.gnu.org/licenses/>.
 */

require_once('curios_entities.inc');
require_once('curios_ldcms.inc');
require_once('curios_admin.inc');
require_once('curios_update.inc');
require_once('curios_sparql.inc');
require_once('curios_functions.inc');
require_once('curios.views.inc');

/**
 * Implements hook_views_api().
 */
function curios_views_api($module, $api) {
  if ($module == 'views' && $api == 'views_default') {
    return array('version' => 2);
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function curios_ctools_plugin_api($module, $api) {
  if ($module == 'panels' && $api == 'layouts') {
    return array('version' => 1);
  }
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_init.
 */
function curios_init() {
  // Temporary fix for exposed drop down filter.
  if (!isset($_GET['field_event_category_value'])) {
    $_GET['field_event_category_value'] = 'All';
  }
}

/**
 * Implements hook_premission.
 *
 * Defines permissions for the CURIOS module.
 */
function curios_permission() {
  return array(
    'curios manage repository' => array(
      'title' => t('Manage Repository'),
      'description' => t('Create, edit, delete items in the CURIOS repository.'),
      'restrict access' => TRUE,
    ),
  );
}

// To work around odd bug in hook_menu.
function curios_resource_type_to_arg() { return ''; }
function curios_subject_id_to_arg() { return ''; }

/**
 * Implements hook_menu.
 *
 * Menu router for the module.
 */
function curios_menu() {
  //if (!variable_get('ldcms_installed')) {
  //  return array();
  //}

  $items = array();
  $items['admin/structure/ldcms'] = array(
    'title' => 'Linked Data CMS settings',
    'description' => 'Managed LDCMS configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curios_admin'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
   );
  $items['curios/manage'] = array(
    'title' => t('Manage Records'),
    'page callback' => 'curios_manage_page',
    'access arguments' => array('curios manage repository'),
    'description' => t('Create, edit, delete records in the repository'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
    'weight' => '99',
  );
  $items['curios/manage/create'] = array(
    'title' => t('Create New Record'),
    'page callback' => 'curios_insert_page',
    'access arguments' => array('curios manage repository'),
    'description' => t('Create a new record'),
     //'type' => MENU_DEFAULT_LOCAL_TASK,
    'type' => MENU_LOCAL_TASK,
    'weight' => '0',
  );
  $items['curios/manage/create/%curios_resource_type'] = array(
    'page callback' => 'curios_insert_form_page',
    'access arguments' => array('curios manage repository'),
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(3),
    'tab parent' => 'curios/manage/create',
  );
  $items['curios/manage/edit'] = array(
    'title' => t('Edit / Delete Record'),
    'page callback' => 'curios_update_page',
    'access arguments' => array('curios manage repository'),
    'description' => t('Edit or delete an existing record'),
    'type' => MENU_LOCAL_TASK,
     'weight' => '1',
  );
  $items['curios/manage/edit/%curios_resource_type/%curios_subject_id'] = array(
    'page callback' => 'curios_update_form_page',
    'access arguments' => array('curios manage repository'),
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(3,4),
    'tab parent' => 'curios/manage/edit',
  );
  $items['curios/manage/tools'] = array(
    'title' => t('Admin Tools'),
    'page callback' => 'curios_admin_tools_page',
    'access arguments' => array('curios manage repository'),
    'description' => t('Repository administration tools.'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '99',
  );
  $items['curios/manage/autocomplete_fields/%/%'] = array(
   'title' => 'Auto complete handler',
    'page callback' => 'curios_autocomplete_fields',
    'access arguments' => array('curios manage repository'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(3,4),
  );

  return $items;
}

/**
 * Implements hook_block_info.
 *
 * Defines blocks used in the module.
 */
function curios_block_info() {
  $blocks = array();

  $blocks['search'] = array(
    'info' => t('CURIOS search block'),
    'status' => TRUE,
    'region' => 'header',
  );

  return $blocks;
}

/**
 * Implements hook_block_view.
 *
 * @param type $delta block name.
 * @return block content.
 */
function curios_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'search':
      $block['subject'] = '<none>';
      $block['content'] = drupal_get_form('curios_search_engine_form');
      break;
  }
  
  return $block;
}

/**
 * Implements hook_filter_info.
 *
 * Filters used in the module.
 */
function curios_filter_info() {
  $filters = array();
  $filters[] = array(
    'title' => t('Description Link Filter'),
    'description' => t('This filter renders the subject links that appear in the description fields of Hebridean Connections subjects.'),
    'process callback' => 'curios_filter_description_links',
  );
  return $filters;
}

/**
 * Filter callback.
 *
 * This filter parses XStandard hyperlink markup in the Hebridean Connections description fields.
 */
function curios_filter_description_links($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $base_path;
  //$subject_link = '/<<([0-9]+)##(.*?)>>/';
  $subject_link = '/&lt;&lt;([0-9]+)##(.*?)&gt;&gt;/';
  $replacement = '<a href="'.$base_path.'subjects/$1">$2</a>';
  return preg_replace($subject_link, $replacement, $text);
}

/**
 * Form callback.
 *
 * The global search box displayed in the header.
 */
function curios_search_engine_form($form, $form_state) {
  if (!variable_get('ldcms_installed')) {
    return;
  }

  $form = array();
  $config = curios_configuration();
  
  $options = array();
  foreach ($config->getViews() as $view_spec) {
    $view = views_get_view($view_spec->getId());
    $options[$view_spec->getId()] = t($view->human_name);
  }
  natcasesort($options);

  $form['query'] = array('#type' => 'textfield', '#title' => t('Search Hebridean Connections'));
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Record Type'),
    '#options' => $options,
    '#default_value' => 'ldcms_people',
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Search'));
  
  return $form;
}

/**
 * Form submit handler.
 *
 * Redirect the search form to the appropriate listings page.
 */
function curios_search_engine_form_submit($form, &$form_state) {
  $base_path = base_path();
  $config = curios_configuration();

  $query = $form_state['values']['query'];
  $view_name = $form_state['values']['type'];
  // TODO get path from panels.
  $view_spec = $config->getViewSpec($view_name);
  //$path = $base_path . $view_spec->getPath();
  $path = $view_spec->getPath();

  $form_state['redirect'] = array($path, array('query' => array('name' => $query)), 302);
}


/**
 * Implements hook_rdf_mapping.
 *
 * Returns RDF mappings for the fields defined in the configuration.
 */
function curios_rdf_mapping() {
  $config = curios_configuration();
  $mappings = array();

  foreach ($config->getResources() as $entity) {
    $rdf_mapping = array();    
    $rdf_mapping['rdftype'] = array($entity->getRDFType());

    foreach ($entity->getFields() as $field) {
      $rdf_mapping[$field->getMachineName()] = array('predicates' => array($field->getRDFPredicate()));
    }

    $mappings[$entity->getMachineName()] = array(
        'type' => 'sparql_views_resource', 
        'bundle' => $entity->getMachineName(), 
        'mapping' => $rdf_mapping);
  }

  return $mappings;
}

/*
 * Implements hook_rdf_namespaces.
 *
 * Returns the prefix to namespace URI mapping from the configuration.
 */
function curios_rdf_namespaces() {
  $config = curios_configuration();
  return $config->getPrefixToNamespaceMap();
}
