<?php
require_once('curios_entities.inc');
require_once('curios_configuration.inc');
require_once('curios_update.inc');
require_once('curios_sparql.inc');
require_once('curios_functions.inc');
require_once('curios.views.inc');

/**
 * Implement hook_views_api().
 */
function curios_views_api($module, $api) {
  if ($module == 'views' && $api == 'views_default') {
    return array('version' => 2);
  }
}

/**
 * Implement hook_ctools_plugin_api().
 */
function curios_ctools_plugin_api($module, $api) {
  if ($module == 'panels' && $api == 'layouts') {
    return array('version' => 1);
  }
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}


//function curios_block_info() {
//  $items = array();
//  $items['curios-test-block'] = array(
//    'info' => t('CURIOS update test block')
//  );
//
//  return $items;
//}

function curios_init() {
  // Temporary fix for exposed drop down filter.
  if (!isset($_GET['field_event_category_value'])) {
    $_GET['field_event_category_value'] = 'All';
  }
}

function curios_permission() {
  return array(
    'curios manage repository' => array(
      'title' => t('Manage Repository'),
      'description' => t('Create, edit, delete items in the CURIOS repository.'),
      'restrict access' => TRUE,
    ),
  );
}

// To work around odd bug in hook_menu
function curios_resource_type_to_arg() { return ''; }
function curios_subject_id_to_arg() { return ''; }

function curios_menu() {
  $items = array();
//  $items['curios/insert'] = array(
//    'title' => t('CURIOS Update Test Page'),
//    'page callback' => 'curios_insert_form_page',
//    'access arguments' => array('access content'),
//    'description' => t('desc'),
//    'type' => MENU_NORMAL_ITEM,
//    'menu_name' => 'navigation',
//    //'page arguments' => array(2),
//  );

  $items['curios/manage'] = array(
    'title' => t('Manage Records'),
    'page callback' => 'curios_manage_page',
    'access arguments' => array('curios manage repository'),
    'description' => t('Create, edit, delete records in the repository'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
    'weight' => '99',
  );
  
  
  $items['curios/manage/create'] = array(
    'title' => t('Create New Record'),
    'page callback' => 'curios_insert_page',
    'access arguments' => array('curios manage repository'),
    'description' => t('Create a new record'),
     //'type' => MENU_DEFAULT_LOCAL_TASK,
    'type' => MENU_LOCAL_TASK,
    'weight' => '0',
  );
  $items['curios/manage/create/%curios_resource_type'] = array(
    'page callback' => 'curios_insert_form_page',
    'access arguments' => array('curios manage repository'),
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(3),
    'tab parent' => 'curios/manage/create',
  );

  $items['curios/manage/edit'] = array(
    'title' => t('Edit / Delete Record'),
    'page callback' => 'curios_update_page',
    'access arguments' => array('curios manage repository'),
    'description' => t('Edit or delete an existing record'),
    'type' => MENU_LOCAL_TASK,
     'weight' => '1',
  );
  $items['curios/manage/edit/%curios_resource_type/%curios_subject_id'] = array(
    'page callback' => 'curios_update_form_page',
    'access arguments' => array('curios manage repository'),
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(3,4),
    'tab parent' => 'curios/manage/edit',
  );

  $items['curios/manage/autocomplete_fields/%/%'] = array(
  	  'title' => 'Auto complete handler',
      'page callback' => 'curios_autocomplete_fields',
      'access arguments' => array('curios manage repository'),
      'type' => MENU_CALLBACK,
      'page arguments' => array(3,4),
    );

//  $items['curios/manage/delete'] = array(
//    'title' => t('Delete Record'),
//    'page callback' => 'curios_delete_page',
//    'access arguments' => array('access content'),
//    'description' => t('desc'),
//    'type' => MENU_LOCAL_TASK,
//    'weight' => '2',
//  );


//  $items['curios/test-search'] = array(
//    'title' => t('CURIOS Test Search Engine Page'),
//    'page callback' => 'curios_search_engine_form_page',
//    'access arguments' => array('access content'),
//    'description' => t('desc'),
//    'type' => MENU_NORMAL_ITEM,
//    'menu_name' => 'navigation',
//   // 'page arguments' => array(0),
//  );

  return $items;
}

function curios_contextual_links_view_alter(&$element, $items) {
  //dpm($element, "ELEMENTS");
  //dpm($items, "ITEMS");
}

//function curios_block_view_alter(&$data, $block) {
//  switch ($block->delta) {
//    case 'main':
//      $data['content']['contextual_links']['#links'][] = array(
//          'href' => 'test',
//          'title' => 'TEST');
//      dpm($data);
//    break;
//  }
//}

function curios_block_info() {
  $blocks = array();

  $blocks['search'] = array(
    'info' => t('CURIOS search block'),
    'status' => TRUE,
    'region' => 'header',
  );

  return $blocks;
}

function curios_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'search':
      $block['subject'] = '<none>';
      $block['content'] = drupal_get_form('curios_search_engine_form');
      break;
  }
  
  return $block;
}

//function curios_preprocess_page(&$variables) {
//  $stylesheet = drupal_get_path('module', 'curios') .'/curios.css';
//  drupal_add_css($stylesheet);
//}

function curios_filter_info() {
  $filters = array();
  $filters[] = array(
    'title' => t('Description Link Filter'),
    'description' => t('This filter renders the subject links that appear in the description fields of Hebridean Connections subjects.'),
    'process callback' => 'curios_filter_description_links',
  );
  return $filters;
}

function curios_filter_description_links($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $base_path;
  //$subject_link = '/<<([0-9]+)##(.*?)>>/';
  $subject_link = '/&lt;&lt;([0-9]+)##(.*?)&gt;&gt;/';
  $replacement = '<a href="'.$base_path.'subjects/$1">$2</a>';
  return preg_replace($subject_link, $replacement, $text);
}

function curios_search_engine_form_page() {
  $page = array();
  $page[] = array('#markup' => '<h2>TEST SEARCH ENGINE From!!!</h2>');
  $page[] = drupal_get_form('curios_search_engine_form');
  return $page;
}

function curios_search_engine_form($form, $form_state) {
  $form = array();
  $config = _curios_configuration();
  
  $options = array();
  foreach ($config['rdf_views'] as $view_name => $view_spec) {
    $view = views_get_view($view_name);
    $options[$view_name] = t($view->human_name);
  }
  natcasesort($options);

  $form['query'] = array('#type' => 'textfield', '#title' => t('Search Hebridean Connections'));
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Record Type'),
    '#options' => $options,
    '#default_value' => 'hc_people',
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Search'));
  return $form;
}

function curios_search_engine_form_submit($form, &$form_state) {
  $base_path = base_path();
  $config = _curios_configuration();

  $query = $form_state['values']['query'];
  $view_name = $form_state['values']['type'];
  // TODO get path from panels.
  $view_spec = $config['rdf_views'][$view_name];
  //$path = $base_path . $view_spec->getPath();
  $path = $view_spec->getPath();

  $form_state['redirect'] = array($path, array('query' => array('name' => $query)), 302);
}




function curios_insert_form_validate($form, &$form_state) {
  //dpm($form);
  //dpm($form_state);

  //if (!$has_value) {
  //  form_set_error('', t('No values entered.'));
  //}
}


//function __curios_sparql_views_info() {
//    $resource_name = 'hc_boat';
//  $resource_type = sparql_views_resource_type_load($resource_name);
//  dpm($resource_type);
//  $entity_info = entity_get_info('sparql_views_resource');
//  $rdf_mapping = $entity_info['bundles'][$resource_name]['rdf_mapping'];
//  $field_instances = field_read_instances(array(
//    'entity_type' => 'sparql_views_resource',
//    'bundle' => $resource_name,));
//}


function _curios_split_camel_case($text) {
  return trim(join(' ', preg_split('/(?=[A-Z])/', $text)));
}


/**
 * Implements hook_rdf_mapping().
 *
 * This hook should only be used to define the RDF mapping for an entity or
 * bundle that has been defined by this module. On installation, this mapping
 * will be saved to the database. To alter anything in this mapping after module
 * installation (or to alter bundles defined in another module), the RDF CRUD
 * functions should be used.
 */
function curios_rdf_mapping() {
  $config = _curios_configuration();
  $mappings = array();

  foreach ($config['rdf_resources'] as $entity) {
    $rdf_mapping = array();    
    $rdf_mapping['rdftype'] = array($entity->getRDFType());

    foreach ($entity->getFields() as $field) {
      $rdf_mapping[$field->getMachineName()] = array('predicates' => array($field->getRDFPredicate()));
    }

    $mappings[$entity->getMachineName()] = array(
        'type' => 'sparql_views_resource', 
        'bundle' => $entity->getMachineName(), 
        'mapping' => $rdf_mapping);
  }

  return $mappings;
}

/*
 * Implements hook_rdf_namespaces().
 *
 * This hook should be used to define any prefixes used by this module that are
 * not already defined in core by rdf_rdf_namespaces.
 *
 * @see http://api.drupal.org/api/drupal/modules--rdf--rdf.api.php/function/hook_rdf_namespaces/7
 */
function curios_rdf_namespaces() {
  $config = _curios_configuration();
  return $config['namespaces'];
}

/**
 * Implements hook_block_info_alter().
 *
 * This is used to place the block view (containing information about the
 * Country from Factbook) in the sidebar for the Leader page.
 *
 * Because Views uses hook_block_info to create the block, we have to use
 * hook_block_info_alter. Because this runs right before saving values to the
 * database, it can overwrite user set values, so we safegaurd against this.
 */
//function kasabi_factbook_block_info_alter(&$blocks, $theme, $code_blocks) {
///  $delta = 'kasabi_factbook-block_1';
//
//  // We only want this to run once, when the block is first saved to the
//  // database. We test to ensure that the definition in block is the same as
//  // the one provided in code.
//  $array_diff = array_diff($blocks['views'][$delta], $code_blocks['views'][$delta]);
//  if (empty($array_diff)) {
//    $blocks['views'][$delta]['status'] = 1;
//    $blocks['views'][$delta]['region'] = 'sidebar_first';
//    $blocks['views'][$delta]['weight'] = -45;
//
//    $query = db_merge('block_node_type')
//      ->key(array('delta' => $delta,))
//      ->fields(array(
//          'type' => 'kasabi_factbook_leader',
//          'module' => 'views',
//      ));
//    $query->execute();
//  }
//}
